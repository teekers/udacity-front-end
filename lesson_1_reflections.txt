How did viewing a diff between two versions of a file help you see the bug that was introduced?
You can track the changes that were made and narrow down the places where the bug could be.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
You can experiment more with solutions and not worry about destructive processes or restructuring things, because 
it would be easy to return to previous version.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs 
having versions automatically saved, like Google Docs does?
You can control how logically distinct the commits are. Also, you're forced to comment/describe them, 
so it's easier to look back later.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, 
like Google Docs, treat each file separately?
Coding projects tend to have multiple interrelated files, so it makes sense to commit them together.

How can you use the commands git log and git diff to view the history of files?
git log shows the history of the commits
Once you see the commits of interest, you can use git diff to compare 2 specific versions.

How might using version control make you more confident to make changes that could break something?
It's easy to revert, so ok to try new ideas

Now that you have your workspace set up, what do you want to try using Git for?
Playing with basic uploading and changing of code to practice commits (using command line).

NOTES: 

git diff [firstID] [secondID]-- Compare two commits, printing each line that is present in one commit but not the other.
git clone [repo_url] -- Make a copy of an entire Git repository, including the history, onto your own computer.
git checkout [ID]-- Temporarily reset all files in a directory to their state at the time of a specific commit.
git log -- Show the commits made in this repository, starting with the most recent.